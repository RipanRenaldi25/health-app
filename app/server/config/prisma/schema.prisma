// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Test {
  id   Int    @id @db.Int
  name String @db.VarChar(255)
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  users User[]

  @@map("roles")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique() @db.VarChar(255)
  email       String   @unique @default("") @db.VarChar(255)
  password    String   @db.VarChar(255)
  role_id     Int      @db.Int
  role        Role     @relation(fields: [role_id], references: [id])
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)
  is_verified Boolean  @default(false)

  intervention         Intervention[]
  uks_activity         UKSActivityPlan[]
  kie_content          KIEContent[]
  institution          Institution?
  health_care_member   HealthCareMember?
  nutrition            Nutrition[]
  approval             UKSActivityApproval[]
  request_intervention RequestIntervention[]
  teacher Teacher?
  family Family?

  @@map("users")
}

model Institution {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(255)
  address      String @db.Text
  phone_number String @db.VarChar(255)
  email        String @db.VarChar(255)

  head_name        String? @db.VarChar(255)
  head_nip         String? @db.VarChar(255)
  license_document String? @db.VarChar(255)
  city_id Int?
  province_id Int?

  user_id Int?  @unique @db.Int
  user    User? @relation(fields: [user_id], references: [id])
  type    Int  @db.Int

  family_member            FamilyMember[]
  institution_type         InstitutionType         @relation(fields: [type], references: [id])
  health_education         HealthEducation?
  health_service           HealthService?
  school_environment       SchoolEnvironment?
  uks_management_quisioner UKSManagementQuisioner?
  health_care              HealthCare?
  facility                 SchoolFacility[]
  request_intervention     RequestIntervention[]
  intervention             Intervention[]
  responses                Response[]
  students Student[]
  teachers Teacher[]
  class_histories StudentClassHistory[]
  teacher_histories TeacherHistory[]
  class_categories ClassCategoryOnClass[]
  city City? @relation(fields: [city_id], references: [id])
  province Province? @relation(fields: [province_id], references: [id])

  @@map("institutions")
}

model Province {
  id Int @db.Int @default(autoincrement()) @id
  name String @db.VarChar(255)

  institutions Institution[]
  cities City[]

  @@map("provinces")
}

model City {
  id Int @db.Int @default(autoincrement()) @id
  name String @db.VarChar(255)
  province_id Int @db.Int

  institutions Institution[]
  province Province @relation(fields: [province_id], references: [id], onDelete: Cascade)

  @@map("cities")
}

model InstitutionType {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  institutions Institution[]
}

model HealthEducation {
  id                                Int     @id @default(autoincrement()) @db.Int
  school_id                         Int     @unique @db.Int
  health_education_plan             Boolean @default(false)
  health_education                  Boolean @default(false)
  physical_education                Boolean @default(false)
  extracurricular_health_activities Boolean @default(false)
  literacy_health_program           Boolean @default(false)
  cader_coaching                    Boolean @default(false)
  healthy_breakfast_program         Boolean @default(false)
  physical_class_activities         Boolean @default(false)
  fitness_test                      Boolean @default(false)
  nutrition_education               Boolean @default(false)
  healthy_living_implementation     Boolean @default(false)
  parent_involvement                Boolean @default(false)
  score                             Int     @default(0) @db.Int
  category_id                       Int     @db.Int

  service_category ServiceCategory @relation(fields: [category_id], references: [id])

  school Institution @relation(fields: [school_id], references: [id])

  @@map("health_educations")
}

model HealthService {
  id                            Int     @id @default(autoincrement()) @db.Int
  school_id                     Int     @unique
  health_check_routine          Boolean @default(false)
  referral_handling             Boolean @default(false)
  consuling_facility            Boolean @default(false)
  periodic_screening_inspection Boolean @default(false)
  score                         Int     @default(0) @db.Int
  category_id                   Int     @db.Int

  school           Institution     @relation(fields: [school_id], references: [id])
  service_category ServiceCategory @relation(fields: [category_id], references: [id])

  @@map("health_services")
}

model SchoolEnvironment {
  id                      Int     @id @default(autoincrement())
  school_id               Int     @unique
  canteen                 Boolean @default(false)
  green_space             Boolean @default(false)
  trash_can               Boolean @default(false)
  unprotected_area_policy Boolean @default(false)
  score                   Int     @default(0) @db.Int
  category_id             Int     @db.Int

  school           Institution     @relation(fields: [school_id], references: [id])
  service_category ServiceCategory @relation(fields: [category_id], references: [id])

  @@map("school_environments")
}

model UKSManagementQuisioner {
  id                      Int     @id @default(autoincrement()) @db.Int
  health_hand_book        Boolean @default(false)
  person_in_charge        Boolean @default(false)
  health_kie              Boolean @default(false)
  sport_infrastructure    Boolean @default(false)
  budget                  Boolean @default(false)
  health_care_partnership Boolean @default(false)
  activity_plan           Boolean @default(false)
  score                   Int     @default(0) @db.Int
  category_id             Int     @db.Int
  school_id               Int     @unique @default(0)

  service_category ServiceCategory @relation(fields: [category_id], references: [id])
  school           Institution     @relation(fields: [school_id], references: [id])

  @@map("uks_managements")
}

model ServiceCategory {
  id          Int     @id @default(autoincrement()) @db.Int
  name        String  @db.VarChar(255)
  description String? @db.Text

  health_education         HealthEducation[]
  health_service           HealthService[]
  school_environment       SchoolEnvironment[]
  uks_management_quisioner UKSManagementQuisioner[]
}

model HealthCare {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  lead_name String @db.VarChar(255)
  school_id Int    @unique

  school              Institution        @relation(fields: [school_id], references: [id])
  health_care_members HealthCareMember[]
  uks_books           UKSBook[]

  activity UKSActivityPlan[]

  @@map("health_cares")
}

model HealthCareMember {
  id             Int    @id @default(autoincrement())
  name           String @db.VarChar(255)
  health_care_id Int    @db.Int
  position_id    Int    @db.Int
  user_id        Int?   @unique @db.Int

  user        User?      @relation(fields: [user_id], references: [id])
  position    Position   @relation(fields: [position_id], references: [id])
  health_care HealthCare @relation(fields: [health_care_id], references: [id])

  uks_activity_assigned UKSActivityAssigned[]

  @@map("health_care_members")
}

model Position {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  modules String @db.VarChar(255)

  health_care_members HealthCareMember[]

  @@map("positions")
}

model Family {
  id                Int     @id @default(autoincrement()) @db.Int
  head_family       String  @db.VarChar(255)
  kk_number         String? @db.VarChar(255)
  head_phone_number String?  @db.VarChar(255)
  description       String? @db.Text
  user_id Int @db.Int @unique

  family_member FamilyMember[]
  user User? @relation(fields: [user_id], references: [id])

  @@unique([kk_number, head_phone_number])
  @@map("families")
}

enum GENDER {
  L
  P
}

enum EDUCATION {
  SD
  SMP
  SMA
  D3
  S1
  S2
  S3
}

enum RELATION {
  AYAH
  IBU
  ANAK
  LAINNYA
}

model FamilyMember {
  id                     Int       @id @default(autoincrement()) @db.Int
  full_name              String    @db.VarChar(255)
  birth_date             DateTime
  education              EDUCATION
  job_id                 Int       @db.Int
  knowledge_nutrition_id Int?      @unique @db.Int
  residence_id           Int       @db.Int
  gender                 GENDER
  relation               RELATION
  family_id              Int       @db.Int
  institution_id         Int?      @db.Int
  phone_number           String?   @db.VarChar(255)
  avatar String? @db.VarChar(255)

  institution Institution? @relation(fields: [institution_id], references: [id])

  family               Family                @relation(fields: [family_id], references: [id])
  job                  Job                   @relation(fields: [job_id], references: [id])
  residence            Residence             @relation(fields: [residence_id], references: [id])
  knowledge_nutrition  KnowledgeNutrition?   @relation(fields: [knowledge_nutrition_id], references: [id])
  nutrition            Nutrition[]
  behaviour            Behaviour?
  request_intervention RequestIntervention[]
  responses            Response[]
  student Student? 
  
  @@unique([phone_number])
  @@map("family_members")
}

enum JOBTYPE {
  TIDAK_BEKERJA_BURUH_SEJENISNYA
  PEKERJA_HONORER_KONTRAK
  PEGAWAI_NEGERI_KARYAWAN_SWASTA
}

model JobType {
  id   Int     @id @default(autoincrement()) @db.Int
  name String? @db.VarChar(255)
  type JOBTYPE

  job Job[]

  @@map("job_types")
}

model Job {
  id          Int    @id @default(autoincrement()) @db.Int
  income      BigInt @db.BigInt
  job_type_id Int    @db.Int

  job_type JobType @relation(fields: [job_type_id], references: [id])

  family_members FamilyMember[]
}

model KnowledgeNutrition {
  id           Int           @id @default(autoincrement()) @db.Int
  knowledge    String        @db.Text
  score        Int?          @db.Int
  FamilyMember FamilyMember?

  @@map("knowledge_nutritions")
}

enum RESIDENCESTATUS {
  OWN
  RENT
  OTHER
}

model Residence {
  id          Int             @id @default(autoincrement()) @db.Int
  status      RESIDENCESTATUS
  description String?         @db.VarChar(255)
  address     String?         @db.Text

  family_member FamilyMember[]

  @@map("residences")
}

model Nutrition {
  id               Int      @id @default(autoincrement()) @db.Int
  height           Float
  weight           Float
  bmi              Float?
  birth_weight     Float?
  family_member_id Int      @db.Int
  created_at       DateTime @default(now()) @db.Timestamp(2)
  updated_at       DateTime @default(now()) @db.Timestamp(2)
  created_by       Int      @db.Int
  updated_by       Int      @default(0) @db.Int
  status_id        Int      @default(3) @db.Int

  nutrition_status NutritionStatus @relation(fields: [status_id], references: [id])
  user             User            @relation(fields: [created_by], references: [id])
  family_member    FamilyMember    @relation(fields: [family_member_id], references: [id], onDelete: Cascade)

  @@map("nutritions")
}

model Behaviour {
  id                Int @id @default(autoincrement()) @db.Int
  eat_frequency     Int @db.Int
  drink_frequency   Int @db.Int
  family_member_id  Int @unique @db.Int
  sleep_quality     Int @db.Int
  physical_activity Int @db.Int
  phbs              Int @default(0) @db.Int

  family_member FamilyMember @relation(fields: [family_member_id], references: [id], onDelete: Cascade)

  @@map("behaviours")
}

enum NUTRITIONSTATUSSES {
  KURUS
  NORMAL
  GEMUK
}

model NutritionStatus {
  id          Int                @id @default(autoincrement()) @db.Int
  status      NUTRITIONSTATUSSES
  information String             @db.VarChar(255)

  nutrition Nutrition[]

  @@map("nutrition_status")
}

model UKSBook {
  id             Int       @id @default(autoincrement()) @db.Int
  name           String    @db.VarChar(255)
  description    String?   @db.Text
  created_at     DateTime? @default(now()) @db.Timestamp(2)
  updated_at     DateTime? @default(now()) @db.Timestamp(2)
  created_by     Int       @db.Int
  updated_by     Int       @db.Int
  thumbnail_url  String?   @db.VarChar(255)
  file_url       String    @db.VarChar(255)
  health_care_id Int       @db.Int

  health_care HealthCare @relation(fields: [health_care_id], references: [id])

  @@map("uks_books")
}

model KIEContent {
  id          Int      @id @default(autoincrement()) @db.Int
  title       String   @db.VarChar(255)
  description String?  @db.Text
  type        Int      @db.Int
  created_by  Int      @db.Int
  updated_by  Int      @db.Int
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)

  poster   Poster?
  article  Article?
  video    Video?
  kie_type KIEType  @relation(fields: [type], references: [id])
  user     User     @relation(fields: [created_by], references: [id])
  kie_tag  KIETag[]

  @@map("kie_contents")
}

model KIETag {
  id   Int    @id @default(autoincrement()) @db.Int
  name String @unique @db.VarChar(255)

  kie_content KIEContent[]
}

model KIEType {
  id   Int    @id @default(autoincrement()) @db.Int
  name String @db.VarChar(255)

  kie_content KIEContent[]

  @@map("kie_types")
}

model Article {
  id            Int     @id @db.Int
  banner_url    String? @db.VarChar(255)
  Content       String  @db.LongText
  thumbnail_url String? @db.VarChar(255)
  created_at DateTime @db.Timestamp(2) @default(now())
  updated_at DateTime @db.Timestamp(2) @default(now())

  kie_content KIEContent @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("articles")
}

model Poster {
  id            Int     @id @db.Int
  image_url     String  @db.VarChar(255)
  thumbnail_url String? @db.VarChar(255)

  kie_content KIEContent @relation(fields: [id], references: [id])
}

model Video {
  id            Int     @id @db.Int
  video_url     String  @db.VarChar(255)
  thumbnail_url String? @db.VarChar(255)

  kie_content KIEContent @relation(fields: [id], references: [id])
}

model SchoolFacility {
  id          Int     @id @default(autoincrement()) @db.Int
  name        String  @db.VarChar(255)
  school_id   Int     @db.Int
  description String? @db.Text

  facility_type_id Int @db.Int

  facility_type FacilityType @relation(fields: [facility_type_id], references: [id])
  school        Institution  @relation(fields: [school_id], references: [id])

  @@map("school_facilities")
}

model FacilityType {
  id   Int    @id @default(autoincrement()) @db.Int
  name String @unique @db.VarChar(255)

  school_facility SchoolFacility[]

  @@map("facility_types")
}

enum ACTIVITYSTATUS {
  DRAFT
  SCHEDULED
  APPROVED
  ONGOING
  COMPLETED
}

model UKSActivityPlan {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(255)
  description      String?        @db.Text
  schedule         DateTime       @db.Timestamp(2)
  budget           Float?
  status           ACTIVITYSTATUS @default(DRAFT)
  health_care_id   Int            @db.Int
  created_by       Int            @db.Int
  updated_by       Int            @db.Int
  atached_document String?        @db.VarChar(255)

  user User @relation(fields: [created_by], references: [id])

  uks_assigned UKSActivityAssigned[]

  uks_approval UKSActivityApproval?

  health_care HealthCare @relation(fields: [health_care_id], references: [id])

  @@map("uks_activity_plans")
}

enum APPROVALSTATUS {
  PENDING
  APPROVED
  REJECTED
}

model UKSActivityApproval {
  id               Int            @id @default(autoincrement()) @db.Int
  activity_plan_id Int            @unique @db.Int
  status           APPROVALSTATUS @default(PENDING)
  comment          String?        @db.Text
  approved_by      Int?           @db.Int

  activity_plan UKSActivityPlan @relation(fields: [activity_plan_id], references: [id], onDelete: Cascade)

  user User? @relation(fields: [approved_by], references: [id])

  @@map("activity_approvals")
}

enum ACTIVITYPROGRESS {
  NOT_STARTED
  PREPARATION
  EXECUTION
  FINALIZING
  COMPLETED
}

model UKSActivityAssigned {
  id               Int              @id @default(autoincrement()) @db.Int
  activity_plan_id Int              @db.Int
  assigned_to      Int              @db.Int
  progress         ACTIVITYPROGRESS @default(NOT_STARTED)
  title            String           @db.VarChar(255)
  job_description  String?          @db.Text

  activity_plan UKSActivityPlan @relation(fields: [activity_plan_id], references: [id])

  health_care_member HealthCareMember @relation(fields: [assigned_to], references: [id])

  @@map("activity_assigneds")
}

model RequestIntervention {
  id               Int      @id @default(autoincrement()) @db.Int
  puskesmas_id     Int      @db.Int
  created_at       DateTime @default(now()) @db.Timestamp(2)
  updated_at       DateTime @default(now()) @db.Timestamp(2)
  created_by       Int      @db.Int
  family_member_id Int      @db.Int
  information      String?  @db.Text

  family_member FamilyMember  @relation(fields: [family_member_id], references: [id], onDelete: Cascade)
  institution   Institution   @relation(fields: [puskesmas_id], references: [id])
  user          User          @relation(fields: [created_by], references: [id])
  intervention  Intervention?

  @@map("request_interventions")
}

model Intervention {
  id                      Int      @id @default(autoincrement()) @db.Int
  recommendation          String   @db.Text
  request_intervention_id Int      @unique @db.Int
  created_by              Int      @db.Int
  created_at              DateTime @default(now()) @db.Timestamp(2)
  updated_at              DateTime @default(now()) @db.Timestamp(2)
  puskesmas_id            Int      @db.Int

  user                 User                @relation(fields: [created_by], references: [id])
  institution          Institution         @relation(fields: [puskesmas_id], references: [id])
  program              Program[]
  request_intervention RequestIntervention @relation(fields: [request_intervention_id], references: [id])

  @@map("intervention")
}

model Program {
  id          Int     @id @default(autoincrement()) @db.Int
  name        String  @db.VarChar(255)
  description String? @db.Text

  intervention Intervention[]
}

enum QUESTIONTYPE {
  MULTIPLE_CHOICE
  BOOLEAN
  SCALE
  TEXT
}

model Quisioner {
  id             Int      @id @default(autoincrement()) @db.Int
  title          String   @db.VarChar(255)
  description    String?  @db.Text()
  created_at     DateTime @default(now()) @db.Timestamp(2)
  stratification String?  @db.VarChar(255)
  for            String?  @db.VarChar(255)

  questions Question[]
  response  Response[]

  @@unique([stratification])
  @@map("quisioners")
}

model Question {
  id           Int          @id @default(autoincrement()) @db.Int
  quisioner_id Int          @db.Int
  question     String       @db.Text
  type         QUESTIONTYPE
  created_at   DateTime     @default(now()) @db.Timestamp(2)
  updated_at   DateTime     @default(now()) @db.Timestamp(2)
  is_required  Boolean      @default(true)

  quisioner Quisioner @relation(fields: [quisioner_id], references: [id], onDelete: Cascade)
  options   Option[]

  @@map("questions")
}

model Option {
  id          Int    @id @default(autoincrement()) @db.Int
  question_id Int    @db.Int
  title       String @db.Text
  score       Int?   @default(0) @db.Int

  created_at DateTime @default(now()) @db.Timestamp(2)
  question   Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("options")
}

model Response {
  id               Int      @id @default(autoincrement()) @db.Int
  quisioner_id     Int      @db.Int
  created_at       DateTime @default(now()) @db.Timestamp(2)
  total_score      Int?     @default(0) @db.Int
  family_member_id Int?     @db.Int
  institution_id   Int?     @db.Int

  quisioner     Quisioner     @relation(fields: [quisioner_id], references: [id], onDelete: Cascade)
  answers       Answer[]
  family_member FamilyMember? @relation(fields: [family_member_id], references: [id], onDelete: Cascade)
  institution   Institution?  @relation(fields: [institution_id], references: [id])

  @@map("responses")
}

model Answer {
  id            Int      @id @default(autoincrement()) @db.Int
  question_id   Int      @db.Int
  response_id   Int      @db.Int
  score         Int?     @default(0) @db.Int
  boolean_value Boolean?
  text_value    String?
  option_id     Int?
  scaleValue    Int?

  response Response @relation(fields: [response_id], references: [id], onDelete: Cascade)

  @@unique([question_id, response_id])
  @@map("answers")
}

model Student {
  id Int @id @db.Int @default(autoincrement())
  school_id Int @db.Int
  family_member_id Int @unique()
  full_name String @db.VarChar(255)
  birth_date DateTime 
  gender GENDER
  nis String @db.VarChar(255) @unique

  institution Institution @relation(fields: [school_id], references: [id], onDelete: Cascade)
  family_member FamilyMember @relation(fields: [family_member_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_histories StudentClassHistory[]

  @@map("students")
}

model Class {
  id Int @db.Int @id @default(autoincrement())
  class String @db.VarChar(55) @unique()

  class_category_on_class ClassCategoryOnClass[]

  @@map("classes")
}

model ClassCategory {
  id Int @db.Int @id @default(autoincrement())
  category String @db.VarChar(55) @unique()

  class_category_on_class ClassCategoryOnClass[]

  @@map("class_categories")
}

model ClassCategoryOnClass {
  id Int @db.Int @default(autoincrement()) @id
  class_id Int @db.Int
  class_category_id Int @db.Int
  school_id Int @db.Int

  class Class @relation(fields: [class_id], references: [id])
  class_category ClassCategory @relation(fields: [class_category_id], references: [id])
  student_class_histories StudentClassHistory[]
  institution Institution @relation(fields: [school_id], references: [id])
  teacher_histories TeacherHistory[]

  @@unique([class_id, class_category_id, school_id])
  @@map("class_category_on_class")
}

model Teacher {
  id Int @db.Int @id @default(autoincrement())
  name String @db.VarChar(255)
  user_id Int @db.Int @unique()
  school_id Int @db.Int
  avatar String? @db.VarChar(255)

  institution Institution @relation(fields: [school_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id])
  teacher_histories TeacherHistory[]

  @@map("teachers")
}

model StudentClassHistory {
  id Int @id  @db.Int @default(autoincrement())
  school_id Int @db.Int
  student_id Int @db.Int
  class_category_on_class_id Int @db.Int
  school_year String @db.VarChar(255)
  semester String @db.VarChar(55)

  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  institution Institution? @relation(fields: [school_id], references: [id], onDelete: Cascade)
  class_category_on_class ClassCategoryOnClass? @relation(fields: [class_category_on_class_id], references: [id])
  
  @@unique([student_id, school_year, semester])
  @@map("student_class_histories")
}

model TeacherHistory {
  id Int @db.Int @default(autoincrement()) @id
  school_id Int @db.Int
  teacher_id Int @db.Int
  class_id Int @db.Int
  school_year String @db.VarChar(255)

  institution Institution @relation(fields: [school_id], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  class ClassCategoryOnClass @relation(fields: [class_id], references: [id])

  @@unique([class_id, school_year])
  @@map("teacher_histories")
}